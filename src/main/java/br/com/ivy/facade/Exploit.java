package br.com.ivy.facade;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Calendar;
import java.util.List;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import br.com.ivy.entity.Target;
import br.com.ivy.entity.Url;
import br.com.ivy.implementation.TargetImplementation;
import br.com.ivy.implementation.UrlImplementation;
import br.com.ivy.service.injection.SqlInjection;
import br.com.ivy.service.scan.TargetScan;
import br.com.ivy.util.WebPage;
import br.com.ivy.util.Whois;

@WebServlet("/exploit")
public class Exploit extends HttpServlet {
	
	private static final long serialVersionUID = -2937378935464874585L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		processRequest(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException,  IOException {
		processRequest(request, response);
	}
	
	private void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException  {
		
		prepare(request);
		
		if(this.host != null) {
			if(WebPage.isReachable(this.host)){
				
				Target target = this.targetImplementation.get(this.host.getHost());
				
				if(target == null){
					save(target);
				}else if (today - target.getLastScan() >= week){
					update(target);
				}else{
					this.path=String.format("/target?id=%s",target.getId());
				}
				
			}else{
				this.error="Dominio está inacessivel no momento!";
			}
		}
			
		if(this.error != "") request.setAttribute("error", this.error);
		
		request.getRequestDispatcher(this.path).forward(request, response);
	}
	
	
	private void prepare(HttpServletRequest request) {
		clear();
		
		if (request.getParameter("domain") != null) {

			try {
				request.setCharacterEncoding("UTF-8");
			} catch (UnsupportedEncodingException e) {}
			
			try{
				this.host = WebPage.getHost(request.getParameter("domain"));
				
				this.today = Calendar.getInstance().getTimeInMillis();
				this.urlImplementation = new UrlImplementation();
				this.targetImplementation = new TargetImplementation();
				
				this.sqlInjection = new SqlInjection();

			}catch(Exception error){ 
				this.error = "Dominio invalido!"; 
			}
		}
	}
	
	private void clear() {
		this.host = null;

		this.today = 0;
		
		this.urlImplementation = null;
		this.targetImplementation = null;
		
		this.sqlInjection = null;
	}
	
	
	private void update(Target target){
		
		target.setLastScan(today);
		
		targetImplementation.update(target);
		
		List<Url> urls = this.urlImplementation.list(target);
		
		for(Url url : urls){
			
			boolean vulnerable = url.isSqlVulnerability();
			
			try {
				vulnerable = this.sqlInjection.exploit(url.getPath());
			} catch (MalformedURLException e) { }
			
			url.setSqlVulnerability(vulnerable);
			
			this.urlImplementation.update(url);
		}
		
		this.path=String.format("/target?id=%s",target.getId());
	}
	
	
	private void save(Target target){
		try {
			target = Whois.get(this.host.getHost());
			
			try {
				Set<String> sampling = new TargetScan().mappingDomain(this.host);
				
				target.setLastScan(today);
				
				this.targetImplementation.persist(target);
				
				for(String link : sampling){
					
					boolean vulnerable = false;
					
					try {
						vulnerable = this.sqlInjection.exploit(link);
					} catch (MalformedURLException e) { }
					
					Url url = new Url();
					
					url.setPath(link);
					url.setSqlVulnerability(vulnerable);
					url.setTarget(target);
					
					this.urlImplementation.persist(url);
				}
				
				this.path=String.format("/target?id=%s",target.getId());
				
			} catch (IOException e) {
				this.error = "Não ha paginas suficientes para teste!";
			}
			
		} catch (IOException | InterruptedException e) {
			this.error = "Não é possivel coletar informações sobre esse dominio!";
		}
	}
	
	private URL host;
	
	private long today;
	
	private String error = "";
	
	private String path = "/";
	
	private UrlImplementation urlImplementation;
	
	private TargetImplementation targetImplementation;
	
	private SqlInjection sqlInjection; 
	
	private static final long week = 1000 * 60 * 60 * 24 * 7;
}