package br.com.ivy.facade;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Calendar;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONObject;

import br.com.ivy.entity.Target;
import br.com.ivy.implementation.TargetImplementation;
import br.com.ivy.util.WebPage;
import br.com.ivy.util.Whois;

@WebServlet("/exploit")
public class Exploit extends HttpServlet {
	
	private static final long serialVersionUID = -2937378935464874585L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		processRequest(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException,  IOException {
		processRequest(request, response);
	}
	
	private void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException  {
		
		prepare(request);
		
		if(this.host != null) {
			if(WebPage.isReachable(this.host)){
				
				Target target = this.targetImplementation.get(this.host.getHost());
				
				if(target == null){
					target = save(target);
				}else if (today - target.getLastScan() >= week){
					target = update(target);
				}
				
				if(target !=null) this.path=String.format("/target?id=%s",target.getId());
				
			}else{
				this.error = "Dominio está inacessivel no momento!";
			}
		}
			
		if(this.error != "") {
			request.setAttribute("error", new JSONObject().put("error", this.error));
			this.path = "/error.jsp";
		}
		
		request.getRequestDispatcher(this.path).forward(request, response);
	}
	
	
	private void prepare(HttpServletRequest request) {
		clear();
		
		if (request.getParameter("domain") != null) {

			try {
				request.setCharacterEncoding("UTF-8");
			} catch (UnsupportedEncodingException e) {}
			
			try{
				this.host = WebPage.getHost(request.getParameter("domain"));
				
				this.today = Calendar.getInstance().getTimeInMillis();
				this.targetImplementation = new TargetImplementation();
				


			}catch(Exception error){ 
				this.error = "Dominio invalido!"; 
			}
		}
	}
	
	private void clear() {

		
		this.targetImplementation = null;

		this.path = "";
		
		this.error = "";
	}
	
	
	private Target update(Target target){
		
		//target = execute(target, target.getUrls());
		
		if(target != null) targetImplementation.update(target);
		
		return target;
	}
	
	
	private Target save(Target target){
		try {
			target = Whois.get(this.host.getHost());
			
			try {
				if (target != null ){
					//target = execute(target, new TargetScan().mappingDomain(this.host));
				}else{
					this.error = "Dominio fora do escopo de Teste! Consulte no rodapé.";
				}
			} catch (Exception e) {
				target = null;
				this.error = "Não ha paginas suficientes para teste!";
			}
			
			if(target != null) {
				targetImplementation.persist(target);
			}
			
		} catch (IOException | InterruptedException e) {
			target = null;
			this.error = "Não é possivel coletar informações sobre esse dominio!";
		}
		
		return target;
	}
	
//	private Target execute(Target target){
//		if(urls != null){
//			Set<Boolean> security = new HashSet<Boolean>();
//			
//			for(Url url : urls){
//				boolean vulnerable = false;
//				
//				try {
//					vulnerable = this.sqlInjection.exploit(url.getPath());
//				} catch (MalformedURLException e) { }
//				
//				url.setSqlVulnerability(vulnerable);
//				
//				security.add(vulnerable);
//			}
//			
//			target.setSecurity((security.contains(true) ? true : false));
//			target.setUrls(urls);
//			target.setLastScan(this.today);
//		}else{
//			target = null;
//			this.error = "Não ha paginas suficientes para teste!";
//		}
//		return target;
//	}
	
	
	private URL host;
	
	private long today;
	
	private String error;
	
	private String path;

	
	private TargetImplementation targetImplementation;
	
	private static final long week = 1000 * 60 * 60 * 24 * 7;
}